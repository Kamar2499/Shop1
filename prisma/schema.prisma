generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("POSTGRES_URL_NON_POOLING") // Раскомментируйте для продакшена
  relationMode = "prisma"
}

enum UserRole {
  ADMIN
  SELLER
  BUYER
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String             @unique
  emailVerified     DateTime?          @map("email_verified")
  password          String
  role              UserRole           @default(BUYER)
  image             String?
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  accounts          Account[]
  cart              CartItem[]
  orders            Order[]
  products          Product[]          @relation("SellerProducts")
  reviews           Review[]
  sellerApplication SellerApplication?
  sessions          Session[]

  @@map("users")
}

model SellerApplication {
  id          String    @id @default(cuid())
  userId      String    @unique @map("user_id")
  status      String    @default("PENDING")
  message     String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  reviewedBy  String?   @map("reviewed_by")
  reviewedAt  DateTime? @map("reviewed_at")
  reviewNotes String?   @map("review_notes")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("seller_applications")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Product {
  id          String         @id @default(cuid())
  name        String
  description String
  price       Float
  category    String
  sizes       String         // JSON array of available sizes
  colors      String         // JSON array of available colors
  stock       Int            @default(0)
  rating      Float?
  numReviews  Int            @default(0)
  sellerId    String         @map("seller_id")
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  cartItems   CartItem[]
  orderItems  OrderItem[]
  images      ProductImage[]
  seller      User           @relation("SellerProducts", fields: [sellerId], references: [id])
  reviews     Review[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  order     Int      @default(0)
  productId String   @map("product_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Order {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  total        Float
  status       String   @default("PENDING")
  shippingInfo String   @map("shipping_info") // JSON object
  paymentInfo  String   @map("payment_info")  // JSON object
  paidAt       DateTime?   @map("paid_at")
  deliveredAt  DateTime?   @map("delivered_at")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  items        OrderItem[]
  user         User        @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String  @map("order_id")
  productId String  @map("product_id")
  quantity  Int
  price     Float
  size      String?
  color     String?
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  productId String   @map("product_id")
  quantity  Int      @default(1)
  size      String?
  color     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, size, color])
  @@map("cart_items")
}

model Review {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  productId String   @map("product_id")
  rating    Int
  comment   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
  @@map("reviews")
}
