// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum UserRole {
  ADMIN
  SELLER
  CUSTOMER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?  @map("email_verified")
  password      String
  role          UserRole  @default(CUSTOMER)
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  products      Product[] @relation("SellerProducts")
  orders        Order[]
  cart          CartItem[]
  reviews       Review[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token         String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")


  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")


  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  images      String
  category    Category
  inStock     Int       @default(0) @map("in_stock")
  sellerId    String    @map("seller_id")
  seller      User      @relation("SellerProducts", fields: [sellerId], references: [id])
  rating      Float?    @default(0)
  numReviews  Int       @default(0) @map("num_reviews")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  sizes       String
  colors      String
  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews     Review[]

  @@map("products")
}

model Order {
  id           String      @id @default(cuid())
  userId       String      @map("user_id")
  user         User        @relation(fields: [userId], references: [id])
  items        OrderItem[]
  total        Float
  status       OrderStatus @default(PENDING)
  shippingInfo String      @map("shipping_info")
  paymentInfo  String      @map("payment_info")
  paidAt       DateTime?   @map("paid_at")
  deliveredAt  DateTime?   @map("delivered_at")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String  @map("order_id")
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float

  @@map("order_items")
}

model CartItem {
  id        String  @id @default(cuid())
  userId    String  @map("user_id")
  user      User    @relation(fields: [userId], references: [id])
  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)
  size      String?
  color     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")


  @@unique([userId, productId, size, color])
  @@map("cart_items")
}

model Review {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  productId String   @map("product_id")
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  comment   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")


  @@unique([userId, productId])
  @@map("reviews")
}

enum Category {
  MEN
  WOMEN
  KIDS
  ACCESSORIES
  SHOES
  SPORTS
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}
